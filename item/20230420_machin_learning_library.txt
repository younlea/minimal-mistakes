from sklearn.model_selection import train_test_split

데이터 정렬 및 변환
pandas - crosstab() - 두 변수의 원소 조합 빈도 확인 (normalize 인자 설정시 비율을 손쉽게 계산)
pandas - sort_valus() - 특정 변수를 기준으로 정렬. 
pandas - melt() - wide form -> long form
pandas - pivot() - long form -> wide form

상관 관계 - 선형성 검사
pandas - corr()  metho - peason, kendal, spearman

from scipy.stats import pearsonr
from scipy.stats import spearmanr
from scipy.stats import kendalltau

비계층 군집 분석 - k-mean  [random_state, seed 고정 필수]
from sklearn.cluster import KMeans
from sklearn.preprocessing import MinMaxScaler
from sklearn.preprocessing import StandardScaler

단순 회귀 분석
from statsmodels.formula.api import ols
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error
from sklearn.metrics import mean_squared_error

다중 회귀 분석 (predict?) 다중 공선성..
from patsy import dmatrices
from statsmodels.stats.outliers_influence import variance_inflation_factor as vif

formula = "casual ~ " + " + ".join(df_sub.columns[:-1])
y, X = dmatrices(formula, data= df_sub,return_type = "dataframe")
df_vif = pd.DataFrame()
df_vif["colname"] =  X.columns
df_vif["VIF"] = [vif(X.values, i ) for i in range(X.shape[1])]
df_vif


로지스틱 회귀분석 - 승산비(OR, odds Ratio)
from statsmodels.api import Logit
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
from sklearn.metrics import precision_score
from sklearn.metrics import recall_score
from sklearn.metrics import f1_score

model = Logit(endog = df_train["Outcome"],  exog = df_train.loc[:, ["BloodPressure", "Glucose", "BMI", "Insulin"]]).fit()
pred = model.predict(exog = df_test.loc[:,["BloodPressure", "Glucose", "BMI", "Insulin"]])
accuracy_score(y_pred=pred_class, y_true = df_test["Outcome"])

나이브 베이즈
from sklearn.naive_bayes import GaussianNB

KNN
from sklearn.neighbors import KNeighborsClassifier    #KNN 분류 모델
from sklearn.neighbors import KNeighborsRegressor  #KNN 회귀 모델

의사 결정 나무
from sklearn.tree import DecisionTreeClassifier   #분류 나무
from sklearn.tree import DecisionTreeRegressor  # 회귀 나무